# Docker Compose for Kooora Application - Production
version: '3.8'

services:
  # PostgreSQL Database with Production Settings
  postgres:
    image: postgres:16-alpine
    container_name: kooora-postgres-prod
    restart: always
    environment:
      POSTGRES_DB: ${DATABASE_NAME:-kooora_prod}
      POSTGRES_USER: ${DATABASE_USERNAME:-kooora_user}
      POSTGRES_PASSWORD: ${DATABASE_PASSWORD}
      POSTGRES_INITDB_ARGS: "--auth-host=scram-sha-256 --auth-local=scram-sha-256"
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgres_prod_data:/var/lib/postgresql/data
      - ./backups:/backups
      - ./postgresql.conf:/etc/postgresql/postgresql.conf
    ports:
      - "5432:5432"
    networks:
      - kooora-prod-network
    command: postgres -c config_file=/etc/postgresql/postgresql.conf
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DATABASE_USERNAME:-kooora_user} -d ${DATABASE_NAME:-kooora_prod}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for Production Caching
  redis:
    image: redis:7-alpine
    container_name: kooora-redis-prod
    restart: always
    environment:
      REDIS_PASSWORD: ${REDIS_PASSWORD}
    volumes:
      - redis_prod_data:/data
      - ./redis.conf:/usr/local/etc/redis/redis.conf
    ports:
      - "6379:6379"
    networks:
      - kooora-prod-network
    command: redis-server /usr/local/etc/redis/redis.conf --requirepass ${REDIS_PASSWORD}
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend Application - Production
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    image: kooora/backend:${VERSION:-latest}
    container_name: kooora-backend-prod
    restart: always
    environment:
      SPRING_PROFILES_ACTIVE: prod
      DATABASE_HOST: postgres
      DATABASE_PORT: 5432
      DATABASE_NAME: ${DATABASE_NAME:-kooora_prod}
      DATABASE_USERNAME: ${DATABASE_USERNAME:-kooora_user}
      DATABASE_PASSWORD: ${DATABASE_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      JWT_EXPIRATION: ${JWT_EXPIRATION:-86400000}
      REDIS_HOST: redis
      REDIS_PORT: 6379
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      EXTERNAL_API_ENABLED: ${EXTERNAL_API_ENABLED:-true}
      FOOTBALL_API_KEY: ${FOOTBALL_API_KEY}
      VAPID_PUBLIC_KEY: ${VAPID_PUBLIC_KEY}
      VAPID_PRIVATE_KEY: ${VAPID_PRIVATE_KEY}
      CORS_ALLOWED_ORIGINS: ${CORS_ALLOWED_ORIGINS:-https://kooora.com,https://www.kooora.com}
      LOG_FILE: /var/log/kooora/app.log
      JAVA_OPTS: "-Xmx2g -Xms1g -XX:+UseG1GC -XX:MaxGCPauseMillis=200"
    ports:
      - "8080:8080"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - kooora-prod-network
    volumes:
      - backend_prod_logs:/var/log/kooora
      - ./ssl:/app/ssl:ro  # SSL certificates if needed
    deploy:
      resources:
        limits:
          memory: 3G
          cpus: '2.0'
        reservations:
          memory: 1G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/actuator/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 120s

  # Frontend Application - Production
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    image: kooora/frontend:${VERSION:-latest}
    container_name: kooora-frontend-prod
    restart: always
    environment:
      NODE_ENV: production
      NEXT_PUBLIC_API_URL: ${API_URL:-https://api.kooora.com}
      HOSTNAME: "0.0.0.0"
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - kooora-prod-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '1.0'
        reservations:
          memory: 512M
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Nginx Reverse Proxy (Production)
  nginx:
    image: nginx:alpine
    container_name: kooora-nginx-prod
    restart: always
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/sites-available:/etc/nginx/sites-available:ro
      - ./ssl:/etc/nginx/ssl:ro
      - nginx_prod_logs:/var/log/nginx
    depends_on:
      - frontend
      - backend
    networks:
      - kooora-prod-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus for Monitoring (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: kooora-prometheus
    restart: always
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    networks:
      - kooora-prod-network
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'

  # Grafana for Dashboards (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: kooora-grafana
    restart: always
    ports:
      - "3001:3000"
    environment:
      GF_SECURITY_ADMIN_PASSWORD: ${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    networks:
      - kooora-prod-network

volumes:
  postgres_prod_data:
    driver: local
  redis_prod_data:
    driver: local
  backend_prod_logs:
    driver: local
  nginx_prod_logs:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

networks:
  kooora-prod-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
