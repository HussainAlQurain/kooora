-- Initial Database Schema for Kooora Application
-- Version 1.0 - PostgreSQL Schema

-- Countries table
CREATE TABLE countries (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(100) NOT NULL UNIQUE,
    code VARCHAR(3) NOT NULL UNIQUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create index on country code for faster lookups
CREATE INDEX idx_countries_code ON countries(code);

-- Teams table
CREATE TABLE teams (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    short_name VARCHAR(50),
    founded_year INTEGER,
    country_id BIGINT NOT NULL,
    logo_url TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (country_id) REFERENCES countries(id)
);

-- Create indexes for teams
CREATE INDEX idx_teams_country_id ON teams(country_id);
CREATE INDEX idx_teams_name ON teams(name);

-- Leagues table
CREATE TABLE leagues (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(255) NOT NULL,
    country_id BIGINT NOT NULL,
    season VARCHAR(20),
    status VARCHAR(20) DEFAULT 'ACTIVE',
    logo_url TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (country_id) REFERENCES countries(id)
);

-- Create indexes for leagues
CREATE INDEX idx_leagues_country_id ON leagues(country_id);
CREATE INDEX idx_leagues_status ON leagues(status);
CREATE INDEX idx_leagues_season ON leagues(season);

-- League teams junction table (Many-to-Many relationship)
CREATE TABLE league_teams (
    league_id BIGINT NOT NULL,
    team_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (league_id, team_id),
    FOREIGN KEY (league_id) REFERENCES leagues(id) ON DELETE CASCADE,
    FOREIGN KEY (team_id) REFERENCES teams(id) ON DELETE CASCADE
);

-- Create indexes for league_teams
CREATE INDEX idx_league_teams_league_id ON league_teams(league_id);
CREATE INDEX idx_league_teams_team_id ON league_teams(team_id);

-- Players table
CREATE TABLE players (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(200) NOT NULL,
    first_name VARCHAR(100) NOT NULL,
    last_name VARCHAR(100) NOT NULL,
    jersey_number VARCHAR(20),
    team_id BIGINT NOT NULL,
    country_id BIGINT NOT NULL,
    date_of_birth DATE,
    position VARCHAR(50),
    photo_url VARCHAR(255),
    height_cm INTEGER,
    weight_kg INTEGER,
    nationality VARCHAR(255),
    is_active BOOLEAN NOT NULL DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (country_id) REFERENCES countries(id)
);

-- Create indexes for players
CREATE INDEX idx_players_team_id ON players(team_id);
CREATE INDEX idx_players_country_id ON players(country_id);
CREATE INDEX idx_players_name ON players(name);
CREATE INDEX idx_players_position ON players(position);

-- Matches table
CREATE TABLE matches (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    home_team_id BIGINT NOT NULL,
    away_team_id BIGINT NOT NULL,
    league_id BIGINT NOT NULL,
    match_date TIMESTAMP NOT NULL,
    status VARCHAR(20) DEFAULT 'SCHEDULED',
    home_team_score INTEGER DEFAULT 0,
    away_team_score INTEGER DEFAULT 0,
    venue VARCHAR(255),
    referee VARCHAR(255),
    attendance INTEGER,
    notes TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (home_team_id) REFERENCES teams(id),
    FOREIGN KEY (away_team_id) REFERENCES teams(id),
    FOREIGN KEY (league_id) REFERENCES leagues(id)
);

-- Create indexes for matches
CREATE INDEX idx_matches_home_team_id ON matches(home_team_id);
CREATE INDEX idx_matches_away_team_id ON matches(away_team_id);
CREATE INDEX idx_matches_league_id ON matches(league_id);
CREATE INDEX idx_matches_match_date ON matches(match_date);
CREATE INDEX idx_matches_status ON matches(status);

-- Match events table
CREATE TABLE match_events (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    match_id BIGINT NOT NULL,
    player_id BIGINT,
    player_in_id BIGINT,
    player_out_id BIGINT,
    team_id BIGINT NOT NULL,
    event_type VARCHAR(50) NOT NULL,
    match_minute INTEGER NOT NULL,
    description TEXT,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (match_id) REFERENCES matches(id) ON DELETE CASCADE,
    FOREIGN KEY (player_id) REFERENCES players(id),
    FOREIGN KEY (player_in_id) REFERENCES players(id),
    FOREIGN KEY (player_out_id) REFERENCES players(id),
    FOREIGN KEY (team_id) REFERENCES teams(id)
);

-- Create indexes for match events
CREATE INDEX idx_match_events_match_id ON match_events(match_id);
CREATE INDEX idx_match_events_player_id ON match_events(player_id);
CREATE INDEX idx_match_events_event_type ON match_events(event_type);
CREATE INDEX idx_match_events_minute ON match_events(match_minute);

-- Team standings table
CREATE TABLE team_standings (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    team_id BIGINT NOT NULL,
    league_id BIGINT NOT NULL,
    position INTEGER NOT NULL,
    played INTEGER DEFAULT 0,
    won INTEGER DEFAULT 0,
    drawn INTEGER DEFAULT 0,
    lost INTEGER DEFAULT 0,
    goals_for INTEGER DEFAULT 0,
    goals_against INTEGER DEFAULT 0,
    goal_difference INTEGER DEFAULT 0,
    points INTEGER DEFAULT 0,
    form VARCHAR(10), -- Last 5 matches (W/D/L)
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (team_id) REFERENCES teams(id),
    FOREIGN KEY (league_id) REFERENCES leagues(id),
    UNIQUE(team_id, league_id)
);

-- Create indexes for team standings
CREATE INDEX idx_team_standings_team_id ON team_standings(team_id);
CREATE INDEX idx_team_standings_league_id ON team_standings(league_id);
CREATE INDEX idx_team_standings_position ON team_standings(position);
CREATE INDEX idx_team_standings_points ON team_standings(points);

-- Player statistics table
CREATE TABLE player_statistics (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    player_id BIGINT NOT NULL,
    league_id BIGINT NOT NULL,
    season VARCHAR(20) NOT NULL,
    matches_played INTEGER DEFAULT 0,
    minutes_played INTEGER DEFAULT 0,
    goals INTEGER DEFAULT 0,
    assists INTEGER DEFAULT 0,
    yellow_cards INTEGER DEFAULT 0,
    red_cards INTEGER DEFAULT 0,
    passes_completed INTEGER DEFAULT 0,
    passes_attempted INTEGER DEFAULT 0,
    pass_accuracy DECIMAL(5,2) DEFAULT 0.0,
    shots_on_target INTEGER DEFAULT 0,
    shots_total INTEGER DEFAULT 0,
    fouls_committed INTEGER DEFAULT 0,
    fouls_suffered INTEGER DEFAULT 0,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    FOREIGN KEY (player_id) REFERENCES players(id),
    FOREIGN KEY (league_id) REFERENCES leagues(id),
    UNIQUE(player_id, league_id, season)
);

-- Create indexes for player statistics
CREATE INDEX idx_player_statistics_player_id ON player_statistics(player_id);
CREATE INDEX idx_player_statistics_league_id ON player_statistics(league_id);
CREATE INDEX idx_player_statistics_season ON player_statistics(season);
CREATE INDEX idx_player_statistics_goals ON player_statistics(goals);
CREATE INDEX idx_player_statistics_assists ON player_statistics(assists);

-- Roles table for user authentication
CREATE TABLE roles (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    name VARCHAR(50) NOT NULL UNIQUE,
    description VARCHAR(255),
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Users table for authentication
CREATE TABLE users (
    id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
    username VARCHAR(50) NOT NULL UNIQUE,
    email VARCHAR(255) NOT NULL UNIQUE,
    password VARCHAR(255) NOT NULL,
    first_name VARCHAR(100),
    last_name VARCHAR(100),
    enabled BOOLEAN DEFAULT TRUE,
    account_non_expired BOOLEAN DEFAULT TRUE,
    account_non_locked BOOLEAN DEFAULT TRUE,
    credentials_non_expired BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    updated_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP
);

-- Create indexes for users
CREATE INDEX idx_users_username ON users(username);
CREATE INDEX idx_users_email ON users(email);
CREATE INDEX idx_users_enabled ON users(enabled);

-- User roles junction table
CREATE TABLE user_roles (
    user_id BIGINT NOT NULL,
    role_id BIGINT NOT NULL,
    created_at TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP,
    PRIMARY KEY (user_id, role_id),
    FOREIGN KEY (user_id) REFERENCES users(id) ON DELETE CASCADE,
    FOREIGN KEY (role_id) REFERENCES roles(id) ON DELETE CASCADE
);

-- Insert default roles
INSERT INTO roles (name, description) VALUES 
    ('ROLE_USER', 'Standard user role'),
    ('ROLE_ADMIN', 'Administrator role'),
    ('ROLE_MODERATOR', 'Moderator role');

-- PostgreSQL-specific trigger functions and triggers (commented out for H2 compatibility)
-- CREATE OR REPLACE FUNCTION update_updated_at_column()
-- RETURNS TRIGGER AS $$
-- BEGIN
--     NEW.updated_at = CURRENT_TIMESTAMP;
--     RETURN NEW;
-- END;
-- $$ language 'plpgsql';

-- Apply updated_at triggers to all tables with updated_at column (PostgreSQL only)
-- CREATE TRIGGER update_countries_updated_at BEFORE UPDATE ON countries FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_teams_updated_at BEFORE UPDATE ON teams FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_leagues_updated_at BEFORE UPDATE ON leagues FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_players_updated_at BEFORE UPDATE ON players FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_matches_updated_at BEFORE UPDATE ON matches FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_team_standings_updated_at BEFORE UPDATE ON team_standings FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_player_statistics_updated_at BEFORE UPDATE ON player_statistics FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();
-- CREATE TRIGGER update_users_updated_at BEFORE UPDATE ON users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column();

-- Create views for common queries
CREATE VIEW v_match_details AS
SELECT 
    m.id,
    m.match_date,
    m.status,
    m.home_team_score,
    m.away_team_score,
    m.venue,
    m.referee,
    m.attendance,
    ht.name AS home_team_name,
    ht.short_name AS home_team_short,
    at.name AS away_team_name,
    at.short_name AS away_team_short,
    l.name AS league_name,
    c.name AS country_name
FROM matches m
JOIN teams ht ON m.home_team_id = ht.id
JOIN teams at ON m.away_team_id = at.id
JOIN leagues l ON m.league_id = l.id
JOIN countries c ON l.country_id = c.id;

-- Create view for league standings
CREATE VIEW v_league_standings AS
SELECT 
    ts.*,
    t.name AS team_name,
    t.short_name AS team_short_name,
    l.name AS league_name,
    c.name AS country_name
FROM team_standings ts
JOIN teams t ON ts.team_id = t.id
JOIN leagues l ON ts.league_id = l.id
JOIN countries c ON l.country_id = c.id
ORDER BY ts.league_id, ts.position;

-- Create view for top scorers
CREATE VIEW v_top_scorers AS
SELECT 
    ps.*,
    p.name AS player_name,
    p.position,
    t.name AS team_name,
    l.name AS league_name
FROM player_statistics ps
JOIN players p ON ps.player_id = p.id
JOIN teams t ON p.team_id = t.id
JOIN leagues l ON ps.league_id = l.id
WHERE ps.goals > 0
ORDER BY ps.goals DESC, ps.assists DESC;

-- Grant permissions (adjust as needed for your deployment)
-- GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA public TO kooora_user;
-- GRANT USAGE, SELECT ON ALL SEQUENCES IN SCHEMA public TO kooora_user;
